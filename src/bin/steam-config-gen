#!/usr/bin/env python3
"""
Steam Launch Options Config Generator
快速生成常用游戏的启动参数配置
"""

import sys
import yaml
from pathlib import Path

# 预定义的游戏配置模板
GAME_TEMPLATES = {
    '440': {  # Team Fortress 2
        'name': 'Team Fortress 2',
        'prefix': {
            'params': ['DXVK_HUD=fps'],
            'user_handling': {'preserve': True, 'position': 'before'}
        },
        'suffix': {
            'params': ['-novid', '-nojoy', '-nosteamcontroller', '-nohltv', '-precachefontchars'],
            'user_handling': {'preserve': True, 'position': 'before'},
            'conflicts': {
                'replace_rules': {'-safe': '', '-autoconfig': ''}
            }
        }
    },
    
    '730': {  # Counter-Strike 2
        'name': 'Counter-Strike 2',
        'prefix': {
            'params': ['RADV_PERFTEST=aco', '__GL_THREADED_OPTIMIZATIONS=1'],
            'user_handling': {'preserve': True, 'position': 'before'}
        },
        'suffix': {
            'params': ['-novid', '-high', '+fps_max 0', '-allow_third_party_software'],
            'user_handling': {'preserve': True, 'position': 'before'},
            'conflicts': {
                'replace_rules': {'-safe': '', '-insecure': ''}
            }
        }
    },
    
    '570': {  # Dota 2
        'name': 'Dota 2',
        'prefix': {
            'params': ['DXVK_HUD=fps'],
            'user_handling': {'preserve': True, 'position': 'before'}
        },
        'suffix': {
            'params': ['-novid', '-high', '-map dota', '-international'],
            'user_handling': {'preserve': True, 'position': 'before'}
        }
    },
    
    'proton_template': {  # Proton游戏通用模板
        'name': 'Proton Game Template',
        'prefix': {
            'params': [
                'PROTON_USE_WINED3D=0',
                'DXVK_HUD=fps',
                'PROTON_NO_ESYNC=0'
            ],
            'user_handling': {'preserve': True, 'position': 'before'},
            'conflicts': {
                'replace_keys': ['PROTON_USE_WINED3D', 'DXVK_HUD']
            }
        },
        'suffix': {
            'params': ['-windowed', '-noborder'],
            'user_handling': {'preserve': True, 'position': 'before'},
            'conflicts': {
                'replace_rules': {'-fullscreen': '-windowed -noborder'}
            }
        }
    }
}

def list_templates():
    """列出可用的模板"""
    print("Available game templates:")
    for app_id, config in GAME_TEMPLATES.items():
        print(f"  {app_id}: {config['name']}")

def generate_config(app_ids, output_file):
    """生成配置文件"""
    config = {
        'global': {
            'backup_enabled': True,
            'backup_path': '~/.config/steam-backups',
            'dry_run': False
        },
        'games': {}
    }
    
    for app_id in app_ids:
        if app_id in GAME_TEMPLATES:
            config['games'][app_id] = GAME_TEMPLATES[app_id].copy()
        else:
            # 创建空白模板
            config['games'][app_id] = {
                'name': f'Game {app_id}',
                'prefix': {
                    'params': [],
                    'user_handling': {'preserve': True, 'position': 'before'}
                },
                'suffix': {
                    'params': [],
                    'user_handling': {'preserve': True, 'position': 'before'}
                }
            }
    
    # 保存配置文件
    output_path = Path(output_file).expanduser()
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        yaml.dump(config, f, default_flow_style=False, indent=2)
    
    print(f"Configuration saved to: {output_path}")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Steam Launch Options Config Generator")
    parser.add_argument('--list', action='store_true', help='List available templates')
    parser.add_argument('--generate', nargs='+', metavar='APP_ID', help='Generate config for app IDs')
    parser.add_argument('--output', default='~/.config/steam-launch-manager.yaml', 
                       help='Output configuration file')
    
    args = parser.parse_args()
    
    if args.list:
        list_templates()
        return
    
    if args.generate:
        generate_config(args.generate, args.output)
        return
    
    parser.print_help()

if __name__ == '__main__':
    main() 